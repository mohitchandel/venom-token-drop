import * as nt from "nekoton-wasm";
import { Address, FullContractState } from "everscale-inpage-provider";
import { BlockchainConfig } from "nekoton-wasm";
interface LockliftTransport {
    getBlockchainConfig(): Promise<BlockchainConfig>;
    setExecutor(executor: LockliftExecutor): void;
}
export declare class LockliftExecutor {
    private readonly transport;
    private state;
    private snapshots;
    private nonce;
    private blockchainConfig;
    private globalId;
    private clock;
    constructor(transport: LockliftTransport);
    initialize(): Promise<void>;
    setClock(clock: nt.ClockWithOffset): void;
    private setAccount;
    getAccount(address: Address | string): FullContractState | undefined;
    getAccounts(): {
        [id: string]: FullContractState;
    };
    getTxTrace(txId: string): nt.EngineTraceInfo[] | undefined;
    private saveTransaction;
    getDstTransaction(msgHash: string): nt.JsRawTransaction | undefined;
    getTransaction(id: string): nt.JsRawTransaction | undefined;
    getTransactions(address: Address | string, fromLt: string, count: number): nt.JsRawTransaction[];
    saveSnapshot(): number;
    loadSnapshot(id: number): void;
    clearSnapshots(): void;
    processQueue(): void;
    processNextMsg(): void;
    enqueueMsg(message: nt.JsRawMessage): void;
}
export {};
